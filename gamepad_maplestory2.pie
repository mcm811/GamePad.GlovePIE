if (Starting) {
	///////////////////////////////////////
	// 채널이동
	var.channel_begin = 3;	// 1~200
	var.channel_step = 5;
	var.channel_num = var.channel_begin - var.channel_step;

	///////////////////////////////////////
	var.EnableAutoFire = True;
	var.normalAttackMode = False;
	var.CannonLevel = 40;	// 오색나무 숲(lv20), 쉐도우 게이트(lv25), 프리즘 폭포(lv30)

	///////////////////////////////////////
	//var.EnableChatMode = True;
	var.MSG_LTHUMB_1 = "괜찮아요? 많이 놀랬죠?";
	var.MSG_LTHUMB_2 = "그럴싸~하쥬?";

	var.MSG_RTHUMB_1 = "피곤할땐 박카스!";
	var.MSG_RTHUMB_2 = "그래 이맛이야!";

	var.MSG_LB_1 = "뿌뿌뿡 뿌뿌뿡";
	var.MSG_LB_2 = "두둥실 두둥실";
	var.MSG_RB_1 = "뾰로롱";
	var.MSG_RB_2 = "뿅";

	var.MSG_CANNON_1 = "얍!";
	var.MSG_CANNON_2 = "빵야 빵야!";
	var.MSG_CANNON_3 = "하앗!";

	///////////////////////////////////////
	var.piename = "gamepad_MapleStory2.pie";
	var.MapleStory2 = True;
	var.joyResetTime = 20;

	var.dzL = 0.2;
	var.dzR = 0.2;
	var.dzTR = 0.2;

	var.arrowKeyPeriod = 0.05;
	var.autoKeyPeriod = 0.35;
	//한 세트의 총 대기시간
	var.WaitActionTime = var.autoKeyPeriod * 5 + var.arrowKeyPeriod * 22;

	var.rumbleBTNType = 0;
	var.rumbleBTN = False;
	var.heldDownTime = 0.3;

	var.toggleTabMode = True;
	var.toggleSmooth = False;
	XInput.Vibration1 = 0;
	XInput.Vibration2 = 0;
	Joystick.Vibration1 = 0;
	Joystick.Vibration2 = 0;
	Keyboard.RepeatFakeKeys = False;
	Keyboard.RepeatMultipleFakeKeys = False;

	[var.cursorX, var.cursorY] = mouse.cursorpos;
	//Execute("taskkill_blackcipher.vbs");
}

if (Pressed(Key.F9 and Key.alt and Key.control and Key.LeftShift)) {
	ExitPIE;
}

if (Window.Class != "MapleStory2") {
	var.AutoFireA = False;
	var.CannonMode = False;
}
if (HeldDown(Window.Class != "MapleStory2", 0.5)) {
	Chain("gamepad_windows.pie");
}

if (var.MapleStory2) {
	// 초기화
	if (Window.Class != "ForegroundStaging") {
		if ([var.INIT_WINDOW_W, var.INIT_WINDOW_H] != [Window.Left + Window.Width, Window.Top + Window.Height]) {
			[var.INIT_WINDOW_W, var.INIT_WINDOW_H] = [Window.Left + Window.Width, Window.Top + Window.Height];
			if (var.debug) DebugPrint("[" + Window.Class + "]: " + window.width + " x " + window.height);
			var.leftborder = (window.Width - window.ClientWidth) / 2;
			var.topborder = window.Height - window.ClientHeight - var.leftborder;
			var.middleX = Round(window.Left + window.Width / 2);
			var.middleY = Round(window.Top + window.Height - var.leftborder - window.ClientHeight / 2);
			var.scaleX = 1 / (2560 / window.width);
			var.scaleY = 1 / (1440 / window.height);
			if (var.debug) DebugPrint("ScaleX: " + var.scaleX + ", ScaleY: " + var.scaleY);
			[var.cursorX, var.cursorY] = [var.middleX, var.middleY + var.scaleY * 240];
		}
	}

	//////////////////////////////////////////
	// Joystick Mapping
	//debug = Joystick.Count + " " + XInput1.Exists + " " + XInput2.Exists;
/*
	if (XInput1.Exists == False and XInput2.Exists == False and XInput3.Exists == False and XInput4.Exists == False) {
		//if (Mouse.LeftButton or Mouse.RightButton) var.joyResetCount = 0;
		//if (var.XI_J1X or var.XI_J1Y or var.XI_J2X or var.XI_J2Y) var.joyResetCount = 0;
		//if (var.XI_LT or var.XI_RT) var.joyResetCount = 0;
		if (var.XI_A or var.XI_B or var.XI_X or var.XI_Y) var.joyResetCount = 0;
		if (var.XI_LB or var.XI_RB) var.joyResetCount = 0;
		if (var.XI_LThumb or var.XI_RThumb or var.XI_Back or var.XI_Start) var.joyResetCount = 0;
		if (var.XI_Up or var.XI_Down or var.XI_Left or var.XI_Right) var.joyResetCount = 0;
		if (Key.Control or Key.Shift or Key.Alt or Key.Space) var.joyResetCount = 0;
		if (Key.Up or Key.Down or Key.Left or Key.Right) var.joyResetCount = 0;

		if (var.joyResetCount > var.joyResetTime and var.AutoFireA = False and var.supportMode = False and var.dealerMode == False) {
			Chain(var.piename);
		} else {
			Wait(1 s);
			var.joyResetCount++;
		}
	}
*/
	var.XI_J1X    = 0;
	var.XI_J1Y    = 0;
	var.XI_J2X    = 0;
	var.XI_J2Y    = 0;
	var.XI_LT     = 0;
	var.XI_RT     = 0;
	if (Joystick.Count > 0) {
		if (abs(Joystick.X) > 0 or abs(Joystick.Y) > 0 or abs(Joystick.Z) > 0 or abs(Joystick.Roll) > 0 or abs((Joystick.pitch + 1) / 2) > 0 or abs((Joystick.yaw + 1) / 2) > 0) {
			var.JoyMode = True;
			var.XI_J1X    = Joystick.X; 
			var.XI_J1Y    = -Joystick.Y; 
			var.XI_J2X    = Joystick.Z; 
			var.XI_J2Y    = -Joystick.Roll; 
			var.XI_LT     = (Joystick.pitch + 1) / 2;
			var.XI_RT     = (Joystick.yaw + 1) / 2;
		}
	}
	if (abs(XInput.Joy1X) > 0 or abs(XInput.Joy1Y) > 0 or abs(XInput.Joy2X) > 0 or abs(XInput.Joy2Y) > 0 or abs(XInput.LeftTrigger) > 0 or abs(XInput.RightTrigger) > 0) {
		var.JoyMode = False;
		var.XI_J1X    = XInput.Joy1X;
		var.XI_J1Y    = XInput.Joy1Y;
		var.XI_J2X    = XInput.Joy2X;
		var.XI_J2Y    = XInput.Joy2Y;
		var.XI_LT     = XInput.LeftTrigger;
		var.XI_RT     = XInput.RightTrigger;
	}
	if (abs(XInput2.Joy1X) > 0 or abs(XInput2.Joy1Y) > 0 or abs(XInput2.Joy2X) > 0 or abs(XInput2.Joy2Y) > 0 or abs(XInput2.LeftTrigger) > 0 or abs(XInput2.RightTrigger) > 0) {
		var.JoyMode = False;
		var.XI_J1X    = XInput2.Joy1X;
		var.XI_J1Y    = XInput2.Joy1Y;
		var.XI_J2X    = XInput2.Joy2X;
		var.XI_J2Y    = XInput2.Joy2Y;
		var.XI_LT     = XInput2.LeftTrigger;
		var.XI_RT     = XInput2.RightTrigger;
	}
	var.XI_A      = XInput.A or XInput2.A or (var.JoyMode and Joystick.button2);
	var.XI_B      = XInput.B or XInput2.B or (var.JoyMode and Joystick.button3);
	var.XI_X      = XInput.X or XInput2.X or (var.JoyMode and Joystick.button1);
	var.XI_Y      = XInput.Y or XInput2.Y or (var.JoyMode and Joystick.button4);
	var.XI_LB     = XInput.LeftShoulder  or XInput2.LeftShoulder  or (var.JoyMode and Joystick.button5);
	var.XI_RB     = XInput.RightShoulder or XInput2.RightShoulder or (var.JoyMode and Joystick.button6);
	var.XI_LThumb = XInput.LeftThumb     or XInput2.LeftThumb     or (var.JoyMode and Joystick.button11);
	var.XI_RThumb = XInput.RightThumb    or XInput2.RightThumb    or (var.JoyMode and Joystick.button12);
	var.XI_Up     = XInput.Up    or XInput2.Up    or (var.JoyMode and Joystick.Pov1 == 0);
	var.XI_Down   = XInput.Down  or XInput2.Down  or (var.JoyMode and Joystick.Pov1 == 180);
	var.XI_Left   = XInput.Left  or XInput2.Left  or (var.JoyMode and Joystick.Pov1 == 270);
	var.XI_Right  = XInput.Right or XInput2.Right or (var.JoyMode and Joystick.Pov1 == 90);
	var.XI_Back   = XInput.Back  or XInput2.Back  or (var.JoyMode and Joystick.button9)  or (var.JoyMode and Joystick.Button14);
	var.XI_Start  = XInput.Start or XInput2.Start or (var.JoyMode and Joystick.button10) or (var.JoyMode and Joystick.Button13);

	///////////////////////////////////////////////////////////////////////
	// 마우스 커서 위치 조정
	if (Pressed(var.resetCurPos)) {
		var.resetCurPos = False;
		Mouse.cursorpos = [var.cursorX, var.cursorY];
	}
	if (Pressed(var.defaultCurPos)) {
		var.defaultCurPos = False;
		Mouse.cursorpos = [var.middleX, var.middleY + var.scaleY * 620];
		Press(Mouse.LeftButton);
		Release(Mouse.LeftButton);
	}

	// 스틱 이동
	// joy2scroll, joy2arrow
	if (var.toggleSmooth) {
		var.jlx = Smooth(Deadzone(var.XI_J1X,  var.dzL), 3);
		var.jly = Smooth(Deadzone(-var.XI_J1Y, var.dzL), 3);
	} else {
		var.jlx = Deadzone(var.XI_J1X,  var.dzL);
		var.jly = Deadzone(-var.XI_J1Y, var.dzL);
	}
	// joy2Mouse
	var.jrx = Deadzone(var.XI_J2X, var.dzR);
	var.jry = Deadzone(-var.XI_J2Y, var.dzR);

	// 왼쪽 스틱을 움직일때
	var.OnLeftStick = abs(var.jlx) > 0 or abs(var.jly) > 0;
	if (Pressed(var.OnLeftStick)) {
		var.defaultCurPos = True;
		//var.TempCannonMode = var.CannonMode;
		//var.TempAutoFireA = var.AutoFireA;
		//var.CannonMode = False;
		//var.AutoFireA = False;
	} else if (Released(var.OnLeftStick)) {
		//var.CannonMode = var.TempCannonMode;
		//var.AutoFireA = var.TempAutoFireA;
	}

	// 오른쪽 스틱을 움직일때
	var.OnRightStick = abs(var.jrx) > 0 or abs(var.jry) > 0;
	if (Pressed(var.OnRightStick)) {
		Mouse.cursorpos = [var.cursorX, var.cursorY];
	} else if (Released(var.OnRightStick)) {
	}

	if (var.OnRightStick) {
		// [Sqr(x) 제곱(스퀘어), Sqrt(x) 제곱근(스퀘어루트), power(x, y) x의 y승(파워)]
		// 좌표 0,0에서 var.jrx, var.jry까지의 거리 = Sqrt(Sqr(var.x1 - var.x2) + Sqr(var.y1 - var.y2))
		var.distance = Min(1, Sqrt(Sqr(var.jrx - 0) + Sqr(var.jry - 0)));
		if (var.distance > 0.8) { 
			var.jrr = EnsureMapRange(var.distance, 0.8, 1, 5, 15);
		} else {
			var.jrr = EnsureMapRange(var.distance, 0.5, 0.8, 0, 5);
		}
		var.jrx = EnsureMapRange(var.jrx, -1, 1, -var.jrr, var.jrr);
		var.jry = EnsureMapRange(var.jry, -1, 1, -var.jrr, var.jrr);
		if (var.ShiftMode) {
			if (abs(var.jrx) < abs(var.jry)) {
				if (var.jry != 0) Mouse.DirectInputZ -= var.jry;
				Wait(0.1 s);
			} else if (abs(var.jrx) > abs(var.jry)) {
				if (Pressed(var.jrx > 0)) {
					XInput.Vibration2 = 0.6;
					Joystick.Vibration2 = 0.6;
					Press(Key.Escape);
					Wait(0.2 s);
					Release(Key.Escape);
					XInput.Vibration2 = 0;
					Joystick.Vibration2 = 0;
				} else if (var.jrx < 0) {
					XInput.Vibration2 = 0.6;
					Joystick.Vibration2 = 0.6;
					Press(Key.Space);
					Wait(0.1 s);
					Release(Key.Space);
					XInput.Vibration2 = 0;
					Joystick.Vibration2 = 0;
					Wait(0.2 s);
				}
			}
		} else if ([var.jrx, var.jry] != [0, 0]) {
			mouse.cursorpos += [var.jrx, var.jry];
			[var.cursorX, var.cursorY] = mouse.cursorpos;
		}
	}

	// Left
	if (var.jlx < 0) {
		var.KeyLeft = True;
		if (Not Key.Left) Press(Key.Left);
	} else {
		if (var.KeyLeft) {
			var.KeyLeft = False;
			if (Key.Left) Release(Key.Left);
		}
	}		
	// Right
	if (var.jlx > 0) {
		var.KeyRight = True;
		if (Not Key.Right) Press(Key.Right);
	} else {
		if (var.KeyRight) {
			var.KeyRight = False;
			if (Key.Right) Release(Key.Right);
		}
	}
	// Up
	if (var.jly < 0) {
		var.KeyUp = True;
		if (Not Key.Up) Press(Key.Up);
	} else {
		if (var.KeyUp) {
			var.KeyUp = False;
			if (Key.Up) Release(Key.Up);
		}
	}
	// Down
	if (var.jly > 0) {
		var.KeyDown = True;
		if (Not Key.Down) Press(Key.Down);
	} else {
		if (var.KeyDown) {
			var.KeyDown = False;
			if (Key.Down) Release(Key.Down);
		}
	}

	// 스킬 버튼
	var.ShiftMode = var.XI_LT > var.dzTR;
	if (Pressed(HeldDown(var.XI_LT > var.dzTR, var.heldDownTime))) {
		var.vib02 = True;
		if (Key.A) Release(Key.A);
		if (var.OnRightStick == False) {
			if (Not Key.X) Press(Key.X);
		}
	} else if (Pressed(var.XI_LT > var.dzTR)) {
		if (Key.A) Release(Key.A);
		if (var.OnRightStick == False) {
			if (Not Key.Z) Press(Key.Z);
			if (Not Mouse.RightButton) Press(Mouse.RightButton);
		}
	} else if (Released(var.XI_LT > var.dzTR)) {
		if (Mouse.RightButton) Release(Mouse.RightButton);
		if (Key.Z) Release(Key.Z);
		if (Key.X) Release(Key.X);
		if (var.AutoFireA) {
			Wait(0.1 s);
			if (Not Key.A) Press(Key.A);
		}
	}

	if (Pressed(HeldDown(var.XI_RT > var.dzTR, var.heldDownTime))) {
		var.vib02 = True;
		var.xrt = True;
		if (var.AutoFireA and Key.A) Release(Key.A);
		//if (Not Key.X) Press(Key.X);
		if (Not Key.A) Press(Key.A);
	} else if (Pressed(var.XI_RT > var.dzTR)) {
		if (var.AutoFireA and Key.A) Release(Key.A);
		if (Not Key.Z) Press(Key.Z);
		if (Not Mouse.LeftButton) Press(Mouse.LeftButton);
	} else if (Released(var.XI_RT > var.dzTR)) {
		if (Mouse.LeftButton) Release(Mouse.LeftButton);
		if (Key.Z) Release(Key.Z);
		if (Key.X) Release(Key.X);
		if (Key.A) Release(Key.A);

		if (var.xrt) {
			var.xrt = False;
		} else {
			if (Not Key.C) Press(Key.C);
			Wait(0.1 s);
			if (Key.C) Release(Key.C);
		}

		if (var.AutoFireA) {
			Wait(0.1 s);
			if (Not Key.A) Press(Key.A);
		}
	}

	if (Pressed(HeldDown(var.XI_LB, 0.15))) {
		var.AutoFireA = False;
		if (Key.A) Release(Key.A);
		if (var.ShiftMode) {
			if (Not Key.Three) Press(Key.Three);
		} else {
			if (Not Key.One) Press(Key.One);
		}
	} else if (DoubleClicked(var.XI_LB)) {
		var.AutoFireA = False;
		if (Key.A) Release(Key.A);
		if (Not Key.Two) Press(Key.Two);
	} else if (Pressed(var.XI_LB)) {
		var.AutoFireA = False;
		if (Key.A) Release(Key.A);
		if (var.ShiftMode) {
			if (Not Key.Three) Press(Key.Three);
		} else {
			//if (Not Key.One) Press(Key.One);
		}
	} else if (Released(var.XI_LB)) {
		if (Key.One) Release(Key.One);
		if (Key.Two) Release(Key.Two);
		if (Key.Three) Release(Key.Three);
		if (var.AutoFireA) Press(Key.A);
	}

	if (Pressed(HeldDown(var.XI_RB, 0.15))) {
		var.AutoFireA = False;
		if (Key.A) Release(Key.A);
		if (var.ShiftMode) {
			if (Not Key.Seven) Press(Key.Seven);
		} else {
			if (Not Key.Five) Press(Key.Five);
		}
	} else if (DoubleClicked(var.XI_RB)) {
		var.AutoFireA = False;
		if (Key.A) Release(Key.A);
		if (Not Key.Six) Press(Key.Six);
	} else if (Pressed(var.XI_RB)) {
		var.AutoFireA = False;
		if (Key.A) Release(Key.A);
		if (var.ShiftMode) {
			if (Not Key.Seven) Press(Key.Seven);
		} else {
			//if (Not Key.Five) Press(Key.Five);
		}
	} else if (Released(var.XI_RB)) {
		if (Key.Five) Release(Key.Five);
		if (Key.Six) Release(Key.Six);
		if (Key.Seven) Release(Key.Seven);
		if (var.AutoFireA) Press(Key.A);
	}

	if (Pressed(var.XI_LThumb)) {
		var.resetCurPos = True;
		if (var.ShiftMode) {
		} else {
			Press(Key.Four);
		}
	} else if (Released(var.XI_LThumb)) {
		if (Key.Four) Release(Key.Four);
	}

	if (Pressed(var.XI_RThumb)) {
		var.resetCurPos = True;
		Press(Key.Eight);
	} else if (Released(var.XI_RThumb)) {
		if (Key.Eight) Release(Key.Eight);
	}
	
	if (var.ChannelMode == False) {
		if (Pressed(HeldDown(var.XI_A, var.heldDownTime))) {
		} else if (var.XI_A) {
			var.turnOnTab = False;
			var.keepSpace = False;
			if (var.XI_LT == False and var.XI_RT == False) {
				if (var.CannonMode) var.CannonMode = False;
				if (var.AutoFireA) var.AutoFireA = False;
			}
			if (var.ShiftMode) {
				if (Not Key.D) Press(Key.D);
				if (Not Key.Space) Press(Key.Space);
			} else {
				if (Not Key.Z) Press(Key.Z);
				if (Not Key.A) Press(Key.A);
			}
		} else if (Released(var.XI_A)) {
			if (Key.Space) Release(Key.Space);
			if (Key.Z) Release(Key.Z);
			if (Key.D) Release(Key.D);
			if (Key.A and var.AutoFireA == False) Release(Key.A);
		}

		if (var.XI_X) {
			var.turnOnTab = False;
			if (Key.A) Release(Key.A);
			if (var.ShiftMode) {
				if (Not Key.E) Press(Key.E);
			} else {
				if (Not Key.Q) Press(Key.Q);
			}
		} else if (Released(var.XI_X)) {
			if (Key.E) Release(Key.E);
			if (Key.Q) Release(Key.Q);
			if (var.AutoFireA) Press(Key.A);
		}

		if (var.XI_B) {
			var.turnOnTab = False;
			if (Key.A) Release(Key.A);
			if (var.ShiftMode) {
				if (Not Key.F) Press(Key.F);
			} else {
				if (Not Key.S) Press(Key.S);
			}
		} else if (Released(var.XI_B)) {
			if (Key.F) Release(Key.F);
			if (Key.S) Release(Key.S);
			if (var.AutoFireA) Press(Key.A);
		}

		if (var.XI_Y) {
			var.turnOnTab = False;
			if (Key.A) Release(Key.A);
			if (var.ShiftMode) {
				if (Not Key.R) Press(Key.R);
			} else {
				if (Not Key.W) Press(Key.W);
			}
		} else if (Released(var.XI_Y)) {
			if (Key.R) Release(Key.R);
			if (Key.W) Release(Key.W);
			if (var.AutoFireA) Press(Key.A);
		}
	}

	// 메뉴 호출
	if (Pressed(HeldDown(var.XI_Back, var.heldDownTime))) {
		if (Not Key.T) Press(Key.T);
	} else if (DoubleClicked(var.XI_Back)) {
	} else if (Pressed(var.XI_Back)) {
		var.resetCurPos = True;
		if (var.ShiftMode == False) {
			if (Not M) Press(Key.M);
		} else {
			if (var.toggleTabMode) {
				var.turnOnTab = Not var.turnOnTab;
			} else {
				if (Not Key.Tab) Press(Key.Tab);
			}
		}
	} else if (Released(var.XI_Back)) {
		//var.AutoFireA = False;
		if (var.toggleTabMode == False and Key.Tab) Release(Key.Tab);
		if (Key.M) Release(Key.M);
		if (Key.T) Release(Key.T);
	}

	// 미니맵 확대 전환
	if (Pressed(var.turnOnTab)) {
		if (Not Tab) Press(Key.Tab);
	} else if (Released(var.turnOnTab)) {
		if (Key.Tab) Release(Key.Tab);
	}
	
	if (Pressed(HeldDown(var.XI_Start, var.heldDownTime))) {
		Press(Key.N);
	} else if (Pressed(var.XI_Start)) {
		var.resetCurPos = True;
		if (var.ShiftMode) {
			Press(Key.J);
		} else {
			Press(Key.Y);
		}
	} else if (Released(var.XI_Start)) {
		if (Key.J) Release(Key.J);
		if (Key.Y) Release(Key.Y);
		if (Key.N) Release(Key.N);
		//var.AutoFireA = False;
	}

	if (Pressed(HeldDown(var.XI_Up, var.heldDownTime))) {
		//BeepDefault;
		Display("매달리기");
		var.keepSpace = True;
	} else if (Pressed(var.XI_Up)) {
		var.resetCurPos = True;
		var.keepSpace = False;
		if (var.ShiftMode) {
			if (Not Key.O) Press(Key.O);
		} else {
			if (Not Key.Space) Press(Key.Space);
			if (Not Key.Z) Press(Key.Z);
		}
	} else if (Released(var.XI_Up)) {
		if (Key.Space and var.keepSpace = False) Release(Key.Space);
		if (Key.Z) Release(Key.Z);
		if (Key.O) Release(Key.O);
		if (Key.T) Release(Key.T);
	}

	if (Pressed(HeldDown(var.XI_Down, var.heldDownTime))) {
		if (Not Key.G) Press(Key.G);
	} else if (Pressed(var.XI_Down)) {
		var.resetCurPos = True;
		if (var.ShiftMode) {
			if (Not Key.U) Press(Key.U);
		} else {
			if (Not Key.Escape) Press(Key.Escape);
		}
	} else if (Released(var.XI_Down)) {
		if (Key.Escape) Release(Key.Escape);
		if (Key.G) Release(Key.G);
		if (Key.U) Release(Key.U);
	}

	if (Pressed(HeldDown(var.XI_Left, var.heldDownTime))) {
		if (Not Key.K) Press(Key.K);
	} else if (Pressed(var.XI_Left)) {
		var.resetCurPos = True;
		if (var.ShiftMode) {
			if (Not Key.K) Press(Key.K);
		} else {
			if (Not Key.P) Press(Key.P);
		}
	} else if (Released(var.XI_Left)) {
		if (Key.P) Release(Key.P);
		if (Key.K) Release(Key.K);
	}

	if (Pressed(HeldDown(var.XI_Right, var.heldDownTime))) {
		if (Not Key.L) Press(Key.L);
	} else if (Pressed(var.XI_Right)) {
		var.resetCurPos = True;
		if (var.ShiftMode) {
			if (Not Key.L) Press(Key.L);
		} else {
			if (Not Key.I) Press(Key.I);
		}
	} else if (Released(var.XI_Right)) {
		if (Key.I) Release(Key.I);
		if (Key.L) Release(Key.L);
	}

	if (Pressed(var.vib01)) {
		var.vib01 = False;
		XInput.Vibration1 = 0.6;
		Joystick.Vibration1 = 0.6;
		XInput.Vibration2 = 0.6;
		Joystick.Vibration2 = 0.6;
		Wait(0.1 s);
		XInput.Vibration1 = 0.0;
		Joystick.Vibration1 = 0.0;
		XInput.Vibration2 = 0.0;
		Joystick.Vibration2 = 0.0;
	}
	if (Pressed(var.vib02)) {
		var.vib02 = False;
		XInput.Vibration2 = 0.6;
		Joystick.Vibration2 = 0.6;
		Wait(0.2 s);
		XInput.Vibration2 = 0.0;
		Joystick.Vibration2 = 0.0;
	}

	var.ChannelMode = var.ChannelMode xor Pressed(var.XI_LT and var.XI_LThumb);
	// 채널이동
	if (var.ChannelMode and SingleClicked(var.XI_A)) {
		var.channel_num += var.channel_step;
		if (var.channel_num > 200) var.channel_num = var.channel_begin;

		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);
		TypeUnicode("채널이동 " + var.channel_num);
		Wait(0.1 s);
		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);

		Display("");
		Display("채널이동");
		Wait(1 s);
		Display("5");
		Wait(1 s);
		Display("4");
		Wait(1 s);
		Display("3");
		Wait(1 s);
		Display("2");
		Wait(1 s);
		Display("1");

		var.CannonMode = False;
		var.AutoFireA = False;
		Wait(0.5 s);
		
		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);
		TypeUnicode("/채널이동 " + var.channel_num);
		Wait(0.1 s);
		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);
		Wait(1 s);
		var.ChannelMode = False;
	}
	if (var.ChannelMode and SingleClicked(var.XI_B)) {
		var.channel_num -= var.channel_step;
		if (var.channel_num < 0) var.channel_num = 200 - var.channel_begin;

		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);
		TypeUnicode("채널이동 " + var.channel_num);
		Wait(0.1 s);
		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);

		Display("");
		Display("채널이동");
		Wait(1 s);
		Display("5");
		Wait(1 s);
		Display("4");
		Wait(1 s);
		Display("3");
		Wait(1 s);
		Display("2");
		Wait(1 s);
		Display("1");

		var.CannonMode = False;
		var.AutoFireA = False;
		Wait(0.5 s);
		
		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);
		TypeUnicode("/채널이동 " + var.channel_num);
		Wait(0.1 s);
		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);
		Wait(1 s);
		var.ChannelMode = False;
	}
	if (var.ChannelMode and SingleClicked(var.XI_X)) {
		var.channel_num += var.channel_step * 2;
		if (var.channel_num > 200) var.channel_num = var.channel_begin;

		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);
		TypeUnicode("채널이동 " + var.channel_num);
		Wait(0.1 s);
		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);

		Display("");
		Display("채널이동");
		Wait(1 s);
		Display("5");
		Wait(1 s);
		Display("4");
		Wait(1 s);
		Display("3");
		Wait(1 s);
		Display("2");
		Wait(1 s);
		Display("1");

		var.CannonMode = False;
		var.AutoFireA = False;
		Wait(0.5 s);

		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);
		TypeUnicode("/채널이동 " + var.channel_num);
		Wait(0.1 s);
		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);
		Wait(1 s);
		var.ChannelMode = False;
	}
	if (var.ChannelMode and SingleClicked(var.XI_Y)) {
		var.channel_num -= var.channel_step * 2;
		if (var.channel_num < 0) var.channel_num = 200 - var.channel_begin;

		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);
		TypeUnicode("채널이동 " + var.channel_num);
		Wait(0.1 s);
		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);

		Display("");
		Display("채널이동");
		Wait(1 s);
		Display("5");
		Wait(1 s);
		Display("4");
		Wait(1 s);
		Display("3");
		Wait(1 s);
		Display("2");
		Wait(1 s);
		Display("1");

		var.CannonMode = False;
		var.AutoFireA = False;
		Wait(0.5 s);

		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);
		TypeUnicode("/채널이동 " + var.channel_num);
		Wait(0.1 s);
		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);
		Wait(1 s);
		var.ChannelMode = False;
	}

	if (Key.Shift and Pressed(Key.F1)) {
		var.channel_num = var.channel_step * 1;
		
		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);
		TypeUnicode("채널이동 " + var.channel_num);
		Wait(0.1 s);
		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);

		Display("");
		Display("채널이동");
		Wait(0.5 s);
		Display("3");
		Wait(0.5 s);
		Display("2");
		Wait(0.5 s);
		Display("1");

		var.CannonMode = False;
		var.AutoFireA = False;
		Wait(0.5 s);

		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);
		TypeUnicode("/채널이동 " + var.channel_num);
		Wait(0.1 s);
		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);
	}
	if (Key.Shift and Pressed(Key.F2)) {
		var.channel_num = var.channel_step * 2;
		
		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);
		TypeUnicode("채널이동 " + var.channel_num);
		Wait(0.1 s);
		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);

		Display("");
		Display("채널이동");
		Wait(0.5 s);
		Display("3");
		Wait(0.5 s);
		Display("2");
		Wait(0.5 s);
		Display("1");

		var.CannonMode = False;
		var.AutoFireA = False;
		Wait(0.5 s);

		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);
		TypeUnicode("/채널이동 " + var.channel_num);
		Wait(0.1 s);
		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);
	}
	if (Key.Shift and Pressed(Key.F3)) {
		var.channel_num = var.channel_step * 3;
		
		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);
		TypeUnicode("채널이동 " + var.channel_num);
		Wait(0.1 s);
		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);

		Display("");
		Display("채널이동");
		Wait(0.5 s);
		Display("3");
		Wait(0.5 s);
		Display("2");
		Wait(0.5 s);
		Display("1");

		var.CannonMode = False;
		var.AutoFireA = False;
		Wait(0.5 s);

		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);
		TypeUnicode("/채널이동 " + var.channel_num);
		Wait(0.1 s);
		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);
	}
	if (Key.Shift and Pressed(Key.F4)) {
		var.channel_num = var.channel_step * 4;
		
		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);
		TypeUnicode("채널이동 " + var.channel_num);
		Wait(0.1 s);
		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);

		Display("");
		Display("채널이동");
		Wait(0.5 s);
		Display("3");
		Wait(0.5 s);
		Display("2");
		Wait(0.5 s);
		Display("1");

		var.CannonMode = False;
		var.AutoFireA = False;
		Wait(0.5 s);

		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);
		TypeUnicode("/채널이동 " + var.channel_num);
		Wait(0.1 s);
		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);
	}
	if (Key.Shift and Pressed(Key.F5)) {
		var.channel_num = var.channel_step * 5;
		
		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);
		TypeUnicode("채널이동 " + var.channel_num);
		Wait(0.1 s);
		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);

		Display("");
		Display("채널이동");
		Wait(0.5 s);
		Display("3");
		Wait(0.5 s);
		Display("2");
		Wait(0.5 s);
		Display("1");

		var.CannonMode = False;
		var.AutoFireA = False;
		Wait(0.5 s);

		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);
		TypeUnicode("/채널이동 " + var.channel_num);
		Wait(0.1 s);
		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);
	}
	if (Key.Shift and Pressed(Key.F6)) {
		var.channel_num = var.channel_step * 6;
		
		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);
		TypeUnicode("채널이동 " + var.channel_num);
		Wait(0.1 s);
		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);

		Display("");
		Display("채널이동");
		Wait(0.5 s);
		Display("3");
		Wait(0.5 s);
		Display("2");
		Wait(0.5 s);
		Display("1");

		var.CannonMode = False;
		var.AutoFireA = False;
		Wait(0.5 s);

		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);
		TypeUnicode("/채널이동 " + var.channel_num);
		Wait(0.1 s);
		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);
	}
	if (Key.Shift and Pressed(Key.F7)) {
		var.channel_num = var.channel_step * 7;
		
		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);
		TypeUnicode("채널이동 " + var.channel_num);
		Wait(0.1 s);
		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);

		Display("");
		Display("채널이동");
		Wait(0.5 s);
		Display("3");
		Wait(0.5 s);
		Display("2");
		Wait(0.5 s);
		Display("1");

		var.CannonMode = False;
		var.AutoFireA = False;
		Wait(0.5 s);

		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);
		TypeUnicode("/채널이동 " + var.channel_num);
		Wait(0.1 s);
		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);
	}
	if (Key.Shift and Pressed(Key.F8)) {
		var.channel_num = var.channel_step * 8;
		
		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);
		TypeUnicode("채널이동 " + var.channel_num);
		Wait(0.1 s);
		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);

		Display("");
		Display("채널이동");
		Wait(0.5 s);
		Display("3");
		Wait(0.5 s);
		Display("2");
		Wait(0.5 s);
		Display("1");

		var.CannonMode = False;
		var.AutoFireA = False;
		Wait(0.5 s);

		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);
		TypeUnicode("/채널이동 " + var.channel_num);
		Wait(0.1 s);
		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);
	}
	if (Key.Shift and Pressed(Key.F9)) {
		var.channel_num = var.channel_step * 9;
		
		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);
		TypeUnicode("채널이동 " + var.channel_num);
		Wait(0.1 s);
		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);

		Display("");
		Display("채널이동");
		Wait(0.5 s);
		Display("3");
		Wait(0.5 s);
		Display("2");
		Wait(0.5 s);
		Display("1");

		var.CannonMode = False;
		var.AutoFireA = False;
		Wait(0.5 s);

		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);
		TypeUnicode("/채널이동 " + var.channel_num);
		Wait(0.1 s);
		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);
	}
	if (Key.Shift and Pressed(Key.F10)) {
		var.channel_num = var.channel_step * 10;
		
		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);
		TypeUnicode("채널이동 " + var.channel_num);
		Wait(0.1 s);
		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);

		Display("");
		Display("채널이동");
		Wait(0.5 s);
		Display("3");
		Wait(0.5 s);
		Display("2");
		Wait(0.5 s);
		Display("1");

		var.CannonMode = False;
		var.AutoFireA = False;
		Wait(0.5 s);

		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);
		TypeUnicode("/채널이동 " + var.channel_num);
		Wait(0.1 s);
		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);
	}
	if (Key.Shift and Pressed(Key.F11)) {
		var.channel_num = var.channel_step * 11;
		
		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);
		TypeUnicode("채널이동 " + var.channel_num);
		Wait(0.1 s);
		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);

		Display("");
		Display("채널이동");
		Wait(0.5 s);
		Display("3");
		Wait(0.5 s);
		Display("2");
		Wait(0.5 s);
		Display("1");

		var.CannonMode = False;
		var.AutoFireA = False;
		Wait(0.5 s);

		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);
		TypeUnicode("/채널이동 " + var.channel_num);
		Wait(0.1 s);
		Press(Key.Enter);
		Wait(0.1 s);
		Release(Key.Enter);
	}

	if (var.EnableChatMode) {
		// 자동 채팅
		if (Pressed(var.keepSpace)) {
			var.rdKSType = Random(2);
			Press(Key.Enter);
			Wait(0.1 s);
			Release(Key.Enter);
			if (var.rdKSType == 0) {
				TypeUnicode("풋쳐핸접!!");
			} else {
				TypeUnicode("쇼미더머니!!");
			}
			Wait(0.1 s);
			Press(Key.Enter);
			Wait(0.1 s);
			Release(Key.Enter);
		}

		if (Pressed(var.XI_LThumb)) {
			var.rdLThumbType = Random(2);
			Press(Key.Enter);
			Wait(0.1 s);
			Release(Key.Enter);
			if (var.rdLThumbType == 0) {
				TypeUnicode(var.MSG_LTHUMB_1);
			} else {
				TypeUnicode(var.MSG_LTHUMB_2);
			}
			Wait(0.1 s);
			Press(Key.Enter);
			Wait(0.1 s);
			Release(Key.Enter);
		}

		if (Pressed(var.XI_RThumb)) {
			var.rdRThumbType = Random(2);
			Press(Key.Enter);
			Wait(0.1 s);
			Release(Key.Enter);
			if (var.rdRThumbType == 0) {
				TypeUnicode(var.MSG_RTHUMB_1);
			} else {
				TypeUnicode(var.MSG_RTHUMB_2);
			}
			Wait(0.1 s);
			Press(Key.Enter);
			Wait(0.1 s);
			Release(Key.Enter);
		}

		if (Pressed(HeldDown(var.XI_LB, 0.15))) {
			var.rdLBType = Random(2);
			Press(Key.Enter);
			Wait(0.1 s);
			Release(Key.Enter);
			if (var.rdLBType == 0) {
				TypeUnicode(var.MSG_LB_1);
			} else {
				TypeUnicode(var.MSG_LB_2);
			}
			Wait(0.1 s);
			Press(Key.Enter);
			Wait(0.1 s);
			Release(Key.Enter);
		}

		if (Pressed(HeldDown(var.XI_RB, 0.15))) {
			var.rdRBType = Random(2);
			Press(Key.Enter);
			Wait(0.1 s);
			Release(Key.Enter);
			if (var.rdRBType == 0) {
				TypeUnicode(var.MSG_RB_1);
			} else {
				TypeUnicode(var.MSG_RB_2);
			}
			Wait(0.1 s);
			Press(Key.Enter);
			Wait(0.1 s);
			Release(Key.Enter);
		}
	}

	// 자동 사격
	if (var.EnableAutoFire) {
		var.AutoFireButton = var.ChannelMode and DoubleClicked(var.XI_A);
		if (Pressed(var.AutoFireButton)) {
			BeepDefault;
			var.AutoFireA = True;
			Wait(0.5 s);
			var.ChannelMode = False;
		}
		var.CannonButton = var.ChannelMode and DoubleClicked(var.XI_B);
		var.CannonKeyOn = Key.Alt and Pressed(Key.F1);
		var.CannonKeyOff = Key.Alt and Pressed(Key.F2);
		if (Pressed(Mouse.XButton1) or Pressed(var.CannonButton) or Pressed(var.CannonKeyOn)) {
			var.CannonMode = True;
			Wait(0.5 s);
			var.ChannelMode = False;
		}
		if (Pressed(var.CannonKeyOff)) {
			var.CannonMode = False;
		}
		if (Pressed(Mouse.XButton2)) {
			var.CannonMode = False;
			Press(Key.C);
		} else if (Released(Mouse.XButton2)) {
			Release(Key.C);
		}

		if (var.CannonMode and var.EnableChatMode) {
			var.randomCannonTime = RandomRange(15, 30);
			Wait(var.randomCannonTime s);
			var.randomCannonType = Random(3);
			if (var.randomCannonType == 0) {
				Press(Key.Enter);
				Wait(0.1 s);
				Release(Key.Enter);
				TypeUnicode(var.MSG_CANNON_1);
				Wait(0.1 s);
				Press(Key.Enter);
				Wait(0.1 s);
				Release(Key.Enter);
			} else if (var.randomCannonType == 1) {
				Press(Key.Enter);
				Wait(0.1 s);
				Release(Key.Enter);
				TypeUnicode(var.MSG_CANNON_2);
				Wait(0.1 s);
				Press(Key.Enter);
				Wait(0.1 s);
				Release(Key.Enter);
			} else if (var.randomCannonType == 2) {
				Press(Key.Enter);
				Wait(0.1 s);
				Release(Key.Enter);
				TypeUnicode(var.MSG_CANNON_3);
				Wait(0.1 s);
				Press(Key.Enter);
				Wait(0.1 s);
				Release(Key.Enter);
			}
		}

		if (Pressed(var.CannonMode)) {
			if (var.EnableChatMode) {
				Press(Key.Enter);
				Wait(0.1 s);
				Release(Key.Enter);
				TypeUnicode("천상의 이름으로!!");
				Wait(0.1 s);
				Press(Key.Enter);
				Wait(0.1 s);
				Release(Key.Enter);
			}

			//Display("");
			//Display("캐논 사격");
			var.AutoFireA = True;

		} else if (Released(var.CannonMode)) {
			if (var.EnableChatMode) {
				Press(Key.Enter);
				Wait(0.1 s);
				Release(Key.Enter);
				TypeUnicode("잠시 쉬고 가실께요");
				Wait(0.1 s);
				Press(Key.Enter);
				Wait(0.1 s);
				Release(Key.Enter);
			}

			//Display("");
			//Display("사격 중지");
			var.fireRandomSkill = False;
			var.AutoFireA = False;
		}
	}
	if (Pressed(var.AutoFireA)) {
		XInput.Vibration2 = 0.6;
		Joystick.Vibration2 = 0.6;
		Wait(0.5 s);
		XInput.Vibration2 = 0.0;
		Joystick.Vibration2 = 0.0;
	} else if (Released(var.AutoFireA)) {
		XInput.Vibration2 = 0.4;
		Joystick.Vibration2 = 0.4;
		Wait(0.2 s);
		XInput.Vibration2 = 0.0;
		Joystick.Vibration2 = 0.0;
		var.fireRandomSkill = False;
	}

	if (var.AutoFireA and var.OnLeftStick == False and var.OnRightStick == False) {
		if (Not (var.XI_A or var.XI_B or var.XI_X or var.XI_Y)) {
			if (var.CannonMode and var.CannonLevel == 20) {
				// 오색나무 숲
				var.fireLeftDown = True;
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.WaitActionTime s);
				var.fireRight = True;
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.WaitActionTime s);
				var.fireUp = True;
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.WaitActionTime s);

			} else if (var.CannonMode and var.CannonLevel == 25) {
				// 쉐도우 게이트
				var.fireLeftUp = True;
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.WaitActionTime s);
				var.fireRightDown = True;
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.WaitActionTime s);
				var.fireRightUp = True;
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.WaitActionTime s);
				var.fireLeftDown = True;
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.WaitActionTime s);
				var.fireLeft = True;
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.WaitActionTime s);
				var.fireRight = True;
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.WaitActionTime s);

			} else if (var.CannonMode and var.CannonLevel == 30) {
				// 프리즘 폭포
				var.fireUp = True;
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.WaitActionTime s);
				var.fireDown = True;
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.WaitActionTime s);
				var.fireLeft = True;
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.WaitActionTime s);
				var.fireRight = True;
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.WaitActionTime s);

			} else if (var.CannonMode and var.CannonLevel == 35) {
				var.randomActionCode = Random(6);		// 공격
				//debug = "ActionCode: " + var.randomActionCode;
				if (var.oldRandomActionCode == var.randomActionCode) {
					var.randomActionCode = Random(4);	// 공격 + 제자리 이동 추가
					debug = "ActionCode(2nd): " + var.randomActionCode;
				}
				var.oldRandomActionCode = var.randomActionCode;

				if (var.randomActionCode == 0) {
					var.fireLeft = True;
				} else if (var.randomActionCode == 1) {
					var.fireRight = True;
				} else if (var.randomActionCode == 2) {
					var.fireUp = True;
				} else if (var.randomActionCode == 3) {
					va.fireDown = True;
				} else if (var.randomActionCode == 4) {
					var.moveLeftUp2RightDown = True;
				} else if (var.randomActionCode == 5) {
					var.moveRightUp2LeftDown = True;
				}
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.WaitActionTime s);

			} else if (var.CannonMode and var.CannonLevel == 40) {
				var.randomActionCode = Random(6);		// 공격
				//debug = "ActionCode: " + var.randomActionCode;
				if (var.oldRandomActionCode == var.randomActionCode) {
					var.randomActionCode = Random(4);	// 공격 + 제자리 이동 추가
					debug = "ActionCode(2nd): " + var.randomActionCode;
				}
				var.oldRandomActionCode = var.randomActionCode;

				if (var.randomActionCode == 0) {
					var.fireLeftUp = True;
				} else if (var.randomActionCode == 1) {
					var.fireRightDown = True;
				} else if (var.randomActionCode == 2) {
					var.fireRightUp = True;
				} else if (var.randomActionCode == 3) {
					var.fireLeftDown = True;
				} else if (var.randomActionCode == 4) {
					var.moveUp2Down = True;
				} else if (var.randomActionCode == 5) {
					var.moveLeft2Right = True;
				}
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.WaitActionTime s);

			} else if (var.CannonMode) {

			} else {
				if (var.AutoFireA and var.OnLeftStick == False and var.normalAttackMode == False) Press(Key.A);
				if (var.AutoFireA and var.OnLeftStick == False and var.normalAttackMode == True) Press(Key.X);
				if (var.AutoFireA and var.OnLeftStick == False) Wait(var.autoKeyPeriod s);
				if (Key.A) Release(Key.A);
				if (Key.X) Release(Key.X);
				if (var.AutoFireA and var.OnLeftStick == False) Wait(var.autoKeyPeriod s);
			}

			// FireSkill
			if (var.fireRandomSkill) {
				var.fireRandomSkill = False;
				var.randomSkillCode = Random(5);
				debug = "SkillCode: " + var.randomSkillCode;
				if (var.oldRandomSkillCode == var.randomSkillCode) {
					var.randomSkillCode = Random(5);
					debug = "SkillCode(2nd): " + var.randomSkillCode;
				}
				var.oldRandomSkillCode = var.randomSkillCode;

				if (var.CannonMode and var.OnLeftStick == False and var.randomSkillCode == 0) Press(Key.Q);
				if (var.CannonMode and var.OnLeftStick == False and var.randomSkillCode == 1) Press(Key.W);
				if (var.CannonMode and var.OnLeftStick == False and var.randomSkillCode == 2) Press(Key.E);
				if (var.CannonMode and var.OnLeftStick == False and var.randomSkillCode == 3) Press(Key.R);
				if (var.CannonMode and var.OnLeftStick == False and var.randomSkillCode == 4) Press(Key.Four);
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.autoKeyPeriod * 3 s);
				if (Key.Q) Release(Key.Q);
				if (Key.W) Release(Key.W);
				if (Key.E) Release(Key.E);
				if (Key.R) Release(Key.R);
				if (Key.Four) Release(Key.Four);
			}

			// FireAttack
			if (Pressed(var.fireLeft)) {
				if (var.CannonMode and var.OnLeftStick == False and var.normalAttackMode == False) Press(Key.A);
				if (var.CannonMode and var.OnLeftStick == False and var.normalAttackMode == True) Press(Key.X);
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.autoKeyPeriod * 2 s);
				if (var.CannonMode and var.OnLeftStick == False) Press(Key.Left); 
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.arrowKeyPeriod * 20 s);
				if (Key.Left) Release(Key.Left);
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.arrowKeyPeriod s);
				if (Key.A) Release(Key.A);
				if (Key.X) Release(Key.X);
				var.fireRandomSkill = True;
				var.fireLeft = False;
			}
			if (Pressed(var.fireRight)) {
				if (var.CannonMode and var.OnLeftStick == False and var.normalAttackMode == False) Press(Key.A);
				if (var.CannonMode and var.OnLeftStick == False and var.normalAttackMode == True) Press(Key.X);
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.autoKeyPeriod * 2 s);
				if (var.CannonMode and var.OnLeftStick == False) Press(Key.Right);
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.arrowKeyPeriod * 20 s);
				if (Key.Right) Release(Key.Right);
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.arrowKeyPeriod s);
				if (Key.A) Release(Key.A);
				if (Key.X) Release(Key.X);
				var.fireRandomSkill = True;
				var.fireRight = False;
			}
			if (Pressed(var.fireUp)) {
				if (var.CannonMode and var.OnLeftStick == False and var.normalAttackMode == False) Press(Key.A);
				if (var.CannonMode and var.OnLeftStick == False and var.normalAttackMode == True) Press(Key.X);
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.autoKeyPeriod * 2 s);
				if (var.CannonMode and var.OnLeftStick == False) Press(Key.Up); 
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.arrowKeyPeriod * 20 s);
				if (Key.Up) Release(Key.Up);
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.arrowKeyPeriod s);
				if (Key.A) Release(Key.A);
				if (Key.X) Release(Key.X);
				var.fireRandomSkill = True;
				var.fireUp = False;
			}
			if (Pressed(var.fireDown)) {
				if (var.CannonMode and var.OnLeftStick == False and var.normalAttackMode == False) Press(Key.A);
				if (var.CannonMode and var.OnLeftStick == False and var.normalAttackMode == True) Press(Key.X);
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.autoKeyPeriod * 2 s);
				if (var.CannonMode and var.OnLeftStick == False) Press(Key.Down);
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.arrowKeyPeriod * 20 s);
				if (Key.Down) Release(Key.Down);
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.arrowKeyPeriod s);
				if (Key.A) Release(Key.A);
				if (Key.X) Release(Key.X);
				var.fireRandomSkill = True;
				var.fireDown = False;
			}
			if (Pressed(var.fireLeftUp)) {
				if (var.CannonMode and var.OnLeftStick == False and var.normalAttackMode == False) Press(Key.A);
				if (var.CannonMode and var.OnLeftStick == False and var.normalAttackMode == True) Press(Key.X);
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.autoKeyPeriod * 2 s);
				if (var.CannonMode and var.OnLeftStick == False) Press(Key.Left); 
				if (var.CannonMode and var.OnLeftStick == False) Press(Key.Up); 
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.arrowKeyPeriod * 20 s);
				if (Key.Left) Release(Key.Left);
				if (Key.Up) Release(Key.Up);
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.arrowKeyPeriod s);
				if (Key.A) Release(Key.A);
				if (Key.X) Release(Key.X);
				var.fireRandomSkill = True;
				var.fireLeftUp = False;
			}
			if (Pressed(var.fireLeftDown)) {
				if (var.CannonMode and var.OnLeftStick == False and var.normalAttackMode == False) Press(Key.A);
				if (var.CannonMode and var.OnLeftStick == False and var.normalAttackMode == True) Press(Key.X);
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.autoKeyPeriod * 2 s);
				if (var.CannonMode and var.OnLeftStick == False) Press(Key.Left);
				if (var.CannonMode and var.OnLeftStick == False) Press(Key.Down);
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.arrowKeyPeriod * 20 s);
				if (Key.Left) Release(Key.Left);
				if (Key.Down) Release(Key.Down);
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.arrowKeyPeriod s);
				if (Key.A) Release(Key.A);
				if (Key.X) Release(Key.X);
				var.fireRandomSkill = True;
				var.fireLeftDown = False;
			}
			if (Pressed(var.fireRightUp)) {
				if (var.CannonMode and var.OnLeftStick == False and var.normalAttackMode == False) Press(Key.A);
				if (var.CannonMode and var.OnLeftStick == False and var.normalAttackMode == True) Press(Key.X);
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.autoKeyPeriod * 2 s);
				if (var.CannonMode and var.OnLeftStick == False) Press(Key.Right); 
				if (var.CannonMode and var.OnLeftStick == False) Press(Key.Up); 
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.arrowKeyPeriod * 20 s);
				if (Key.Right) Release(Key.Right);
				if (Key.Up) Release(Key.Up);
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.arrowKeyPeriod s);
				if (Key.A) Release(Key.A);
				if (Key.X) Release(Key.X);
				var.fireRandomSkill = True;
				var.fireRightUp = False;
			}
			if (Pressed(var.fireRightDown)) {
				if (var.CannonMode and var.OnLeftStick == False and var.normalAttackMode == False) Press(Key.A);
				if (var.CannonMode and var.OnLeftStick == False and var.normalAttackMode == True) Press(Key.X);
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.autoKeyPeriod * 2 s);
				if (var.CannonMode and var.OnLeftStick == False) Press(Key.Right);
				if (var.CannonMode and var.OnLeftStick == False) Press(Key.Down);
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.arrowKeyPeriod * 20 s);
				if (Key.Right) Release(Key.Right);
				if (Key.Down) Release(Key.Down);
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.arrowKeyPeriod s);
				if (Key.A) Release(Key.A);
				if (Key.X) Release(Key.X);
				var.fireRandomSkill = True;
				var.fireRightDown = False;
			}
			// Move
			if (Pressed(var.moveLeft2Right)) {
				//Left
				if (var.CannonMode and var.OnLeftStick == False) Press(Key.Left);
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.arrowKeyPeriod * 4 s);
				if (Key.Left) Release(Key.Left);
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.autoKeyPeriod s);
				//Right
				if (var.CannonMode and var.OnLeftStick == False) Press(Key.Right);
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.arrowKeyPeriod * 4 s);
				if (Key.Right) Release(Key.Right);
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.autoKeyPeriod s);
				var.moveLeftRight = False;
			}
			if (Pressed(var.moveUp2Down)) {
				//Up
				if (var.CannonMode and var.OnLeftStick == False) Press(Key.Up);
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.arrowKeyPeriod * 4 s);
				if (Key.Up) Release(Key.Up);
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.autoKeyPeriod s);
				//Down
				if (var.CannonMode and var.OnLeftStick == False) Press(Key.Down);
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.arrowKeyPeriod * 4 s);
				if (Key.Down) Release(Key.Down);
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.autoKeyPeriod s);
				var.moveUpDown = False;
			}
			if (Pressed(var.moveLeftUp2RightDown)) {
				//Left+Up
				if (var.CannonMode and var.OnLeftStick == False) Press(Key.Left);
				if (var.CannonMode and var.OnLeftStick == False) Press(Key.Up);
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.arrowKeyPeriod * 4 s);
				if (Key.Left) Release(Key.Left);
				if (Key.Up) Release(Key.Up);
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.autoKeyPeriod s);
				//Right+Down
				if (var.CannonMode and var.OnLeftStick == False) Press(Key.Right);
				if (var.CannonMode and var.OnLeftStick == False) Press(Key.Down);
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.arrowKeyPeriod * 4 s);
				if (Key.Right) Release(Key.Right);
				if (Key.Down) Release(Key.Down);
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.autoKeyPeriod s);
				var.moveLeftUp2RightDown = False;
			}
			if (Pressed(var.moveRightUp2LeftDown)) {
				//Right+Up
				if (var.CannonMode and var.OnLeftStick == False) Press(Key.Right);
				if (var.CannonMode and var.OnLeftStick == False) Press(Key.Up);
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.arrowKeyPeriod * 4 s);
				if (Key.Right) Release(Key.Right);
				if (Key.Up) Release(Key.Up);
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.autoKeyPeriod s);
				//Left+Down
				if (var.CannonMode and var.OnLeftStick == False) Press(Key.Left);
				if (var.CannonMode and var.OnLeftStick == False) Press(Key.Down);
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.arrowKeyPeriod * 4 s);
				if (Key.Left) Release(Key.Left);
				if (Key.Down) Release(Key.Down);
				if (var.CannonMode and var.OnLeftStick == False) Wait(var.autoKeyPeriod s);
				var.moveRightUp2LeftDown = False;
			}
		}
	}
}				// (var.MapleStory2)